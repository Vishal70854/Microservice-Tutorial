server:
  port: 8081
# database configuration of mysql
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/microservices
    username: root
    password: Vishal@123
    driver-class-name: com.mysql.cj.jdbc.Driver
  # configuration of spring jpa
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  application:
    name: USER-SERVICE  # this will provide name of application
  config:  # importing configuration from configserver(which fetches configuration from github)
    import: optional:configserver:http://localhost:8085  # imported configserver configurations(mention ip and port of config server)
    # spring.config.import= configserver:http://localhost:8085 # other way of importing config client

#----------------------------------------------------
## eureka configuration for discovery client
#eureka:  # since we will get these configurations from configserver that's why commenting it
#  client:
#    fetch-registry: true  # by default these are true
#    register-with-eureka: true
#    service-url:
#      defaultZone: http://localhost:8761/eureka # it will use this eureka server url inorder to register with server
#  instance:
#    prefer-ip-address: true # it will prefer ip address
##----------------------------------------------------

# configuration of actuator, circuit-breaker, retry in resilience4j
## configuration of actuator(for getting health checks)
management:
  health:
    circuitbreakers:
      enabled: true # it means we have enabled circuit breakers in health actuator
  endpoints:
    web:
      exposure:
        include: health # endpoints id is included for health
  endpoint:
    health:
      show-details: always  # show details property is enabled to show full health details


## configuration of resilience4j circuit breaker
resilience4j:
  circuitbreaker:
    instances:
      ratingHotelBreaker: # instance name mentioned in @CircuitBreaker(name="ratingHotelBreaker")
        register-health-indicator: true # configuration of ratingHotelBreaker circuit breaker
        event-consumer-buffer-size: 10
        failure-rate-threshold: 50  # 50% failure rate threshold
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true # auto transmission from open state to half-open state
        wait-duration-in-open-state: 6s # wait time to move from open state to half-open state
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        sliding-window-type: COUNT_BASED
  # retry configurations in resilience4j
  retry:
    instances:
      ratingHotelService:
        max-attempts: 3 # maximum no. of attempts for retry a service(to check if it is running or down)
        wait-duration: 5s # 5 seconds wait duration for retry

  # rateLimiter configuration
  ratelimiter:
    instances:
      userRateLimiter:
        limit-refresh-period: 4s  # refresh period limit
        limit-for-period: 2       # only allow 2 request on every 4 seconds
        timeout-duration: 2s      # The default wait time a thread waits for a permission

